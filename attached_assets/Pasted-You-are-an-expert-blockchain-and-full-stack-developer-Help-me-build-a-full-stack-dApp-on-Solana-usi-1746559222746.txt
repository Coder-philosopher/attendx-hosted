You are an expert blockchain and full-stack developer. Help me build a full-stack dApp on Solana using React (frontend), Node.js or Express (backend, optional), and Solana's ZK Compression primitives. The goal is to create a Proof-of-Participation (POP) system that uses compressed tokens (cTokens) to record event attendance efficiently.

Build a web app with the following:

## üî• Features
1. **Event Creator Flow**:
   - UI to create an event (name, description, date).
   - Automatically mint a compressed token (cToken) on Solana as a badge for the event using ZK Compression.
   - Generate a unique QR code for each event that allows attendees to claim the token via Solana Pay.

2. **Attendee Flow**:
   - When the QR is scanned, the user is redirected to a claim page.
   - On the claim page, a button initiates a Solana Pay transaction or cToken airdrop to the user‚Äôs wallet.
   - Confirm successful claim and store the claimed token reference.

3. **Token Viewer Page** (Optional but preferred):
   - Shows users all the cTokens they‚Äôve collected (i.e., their event attendance history).
   - Uses wallet connect (Phantom/Backpack) to read token metadata.

4. **Backend (Optional)**:
   - Use Node.js or Express.js to store metadata like event info and claimed tokens (for verification).
   - Use Firebase or MongoDB if persistence is needed.

## üîß Tech Stack
- **Frontend**: React.js, Tailwind CSS for styling
- **Solana SDK**: Use `@solana/web3.js`, `@helius-labs/helius` and/or `@lightprotocol/client`
- **ZK Compression**: Use Light Protocol‚Äôs Monorepo or guides to mint cTokens using Merkle trees.
- **Wallet Integration**: Phantom wallet adapter
- **QR Code**: Use `qrcode.react` or `react-qr-code`
- **Solana Pay Integration**: Build simple Solana Pay links that trigger token claiming
- **Backend (if used)**: Node.js with Express, or Firebase functions

## üìÑ Pages to Create
1. `/create-event` ‚Äì Form for organizers to mint a compressed token and get a QR code
2. `/claim/:eventId` ‚Äì Page for users to claim the cToken by scanning QR
3. `/my-tokens` ‚Äì List cTokens owned by connected wallet

## üß† What to Use from the Solana Ecosystem
- Use Helius or Light Protocol SDKs for compressed token minting
- Use Anchor only if needed; aim for simplicity
- Host on Devnet for now
- QR code should encode the `/claim/:eventId` link

## üì¶ Features Summary
- Mint compressed NFTs (cTokens) using ZK Compression
- Use Solana Pay or Web3 methods for token claiming
- QR code-based flow for attendance
- View collected tokens in a wallet-connected dashboard

## ‚ö†Ô∏è Constraints
- Must use **compressed tokens or compressed accounts** (ZK Compression)
- Must work with **Solana Devnet** for testing
- Do **not** use traditional NFTs or tokens (they are too expensive)
- All smart contract or minting actions must respect Solana's state cost optimizations

Please scaffold the project in Replit with basic functional code to get started, including:
- React pages and routing
- One sample minting function using Light Protocol or Helius
- QR code generation
- A test cToken on Devnet if possible

